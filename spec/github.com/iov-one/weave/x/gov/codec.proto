syntax = "proto3";

package gov;

import "codec.proto";
import "gogoproto/gogo.proto";
import "orm/codec.proto";

// Electorate defines who may vote in an election. This same group can be used in many elections
// and is stored for re-use
message Electorate {
  weave.Metadata metadata = 1;
  // Document version
  uint32 version = 2;
  // Admin is the address that is allowed ot modify an existing electorate.
  bytes admin = 3 [(gogoproto.casttype) = "github.com/iov-one/weave.Address"];
  // Human readable title.
  string title = 4;
  // Elector defines a list of all signatures that are allowed to participate in a vote
  repeated Elector electors = 5 [(gogoproto.nullable) = false];
  // TotalElectorateWeight is the sum of all electors weights.
  uint64 total_electorate_weight = 6;
}

// Elector clubs together a address with a weight. The greater the weight
// the greater the power of a participant.
message Elector {
  // The address of the voter.
  bytes address = 1 [(gogoproto.casttype) = "github.com/iov-one/weave.Address"];
  // Weight defines the power of the participants vote. max value is 65535 (2^16-1).
  uint32 weight = 2;
}

// Election Rule defines how an election is run. A proposal must be voted upon via a pre-defined ruleset.
message ElectionRule {
  weave.Metadata metadata = 1;
  // Document version.
  uint32 version = 2;
  // Admin is the address that is allowed to modify an existing election rule.
  bytes admin = 3 [(gogoproto.casttype) = "github.com/iov-one/weave.Address"];
  // ElectorateID references the electorate using this rule (without version, as changing electorate changes the rule).
  bytes electorate_id = 4 [(gogoproto.customname) = "ElectorateID"];
  // Human readable title.
  string title = 5;
  // Duration in seconds of how long the voting period will take place.
  uint32 voting_period = 6 [(gogoproto.casttype) = "github.com/iov-one/weave.UnixDuration"];
  // Threshold is the fraction of either all eligible voters or in case of a quorum setup the fraction of all non
  // abstained votes.
  // To accept a proposal this value must be exceeded with Yes votes.
  // The formula applied is:
  // (yes * denominator) > (base * numerator) with base total electorate weight or Yes/No votes in case of quorum set
  //
  // The valid range for the threshold value is `0.5` to `1` (inclusive) which allows any value between half and all
  // of the eligible voters.
  Fraction threshold = 7 [(gogoproto.nullable) = false];
  // The quorum fraction of eligible voters is based on the total electorate weight and defines a threshold of
  // votes that must be exceeded before the acceptance threshold is applied.
  // This value requires any kind of votes and not only YES.
  //
  // The valid range for the threshold value is `0.5` to `1` (inclusive) which allows any value between half and all
  // of the eligible voters.
  Fraction quorum = 8;
  // Address of this entity. Set during creation and does not change.
  bytes address = 9 [(gogoproto.casttype) = "github.com/iov-one/weave.Address"];
}

// The Fraction type represents a numerator and denominator to enable higher precision thresholds in
// the election rules. For example:
// numerator: 1, denominator: 2 => > 50%
// numerator: 2, denominator: 3 => > 66.666..%
// numerator: 6273, denominator: 10000 => > 62.73%
// Valid range of the fraction is 0.5 to 1.
message Fraction {
  // The top number in a fraction.
  uint32 numerator = 1;
  // The bottom number
  uint32 denominator = 2;
}

// A generic proposal for an on-chain governance process.
// Most fields control the whole election process.
// raw_option contains an transaction to be executed by the governance vote in case of success
// (what is being voted on)
message Proposal {
  weave.Metadata metadata = 1;
  // Human readable title.
  string title = 2;
  // Content of the proposal. Protobuf encoded, app-specific decoded must be passed in constructor
  bytes raw_option = 3;
  // Description of the proposal in text form.
  string description = 4;
  // ElectionRuleRef is a reference to the election rule
  orm.VersionedIDRef election_rule_ref = 5 [(gogoproto.nullable) = false];
  // Reference to the electorate to define the group of possible voters.
  orm.VersionedIDRef electorate_ref = 6 [(gogoproto.nullable) = false];
  // Unix timestamp of the block where the voting period starts. Header time of the votes must be greater than or equal
  // to this start time.
  int64 voting_start_time = 7 [(gogoproto.casttype) = "github.com/iov-one/weave.UnixTime"];
  // Unix timestamp of the block where the voting period ends. Header times of the votes must be before this end time
  // to be included in the election.
  int64 voting_end_time = 8 [(gogoproto.casttype) = "github.com/iov-one/weave.UnixTime"];
  // Unix timestamp of the block where the proposal was added to the chain.
  int64 submission_time = 9 [(gogoproto.casttype) = "github.com/iov-one/weave.UnixTime"];
  // Address of the author who created the proposal. If not set explicit on creation it will default to the main signer.
  bytes author = 10 [(gogoproto.casttype) = "github.com/iov-one/weave.Address"];
  // Result of the election. Contains intermediate tally results while voting period is open.
  TallyResult vote_state = 11 [(gogoproto.nullable) = false];
  enum Status {
    // An empty value is invalid and not allowed
    PROPOSAL_STATUS_INVALID = 0;
    // Initial status of a proposal when persisted.
    PROPOSAL_STATUS_SUBMITTED = 1 [(gogoproto.enumvalue_customname) = "Submitted"];
    // Final status of a proposal when the tally was executed
    PROPOSAL_STATUS_CLOSED = 2 [(gogoproto.enumvalue_customname) = "Closed"];
    // A proposal can be deleted before the voting start time by the owner. When this happens the final status
    // is Withdrawn.
    PROPOSAL_STATUS_WITHDRAWN = 3 [(gogoproto.enumvalue_customname) = "Withdrawn"];
  }
  // Status represents the high level position in the life cycle of the proposal. Initial value is Submitted.
  Status status = 12;
  enum Result {
    // An empty value is invalid and not allowed
    PROPOSAL_RESULT_INVALID = 0;
    // Until a final tally has happened the status is undefined
    PROPOSAL_RESULT_UNDEFINED = 1 [(gogoproto.enumvalue_customname) = "Undefined"];
    // Final result of the tally
    PROPOSAL_RESULT_ACCEPTED = 2 [(gogoproto.enumvalue_customname) = "Accepted"];
    // Final result of the tally
    PROPOSAL_RESULT_REJECTED = 3 [(gogoproto.enumvalue_customname) = "Rejected"];
  }
  // Result is the final result based on the votes and election rule. Initial value is Undefined.
  Result result = 13;
  enum ExecutorResult {
    // An empty value is not allowed
    PROPOSAL_EXECUTOR_RESULT_INVALID = 0;
    // We have not yet run the executor
    PROPOSAL_EXECUTOR_RESULT_NOT_RUN = 1 [(gogoproto.enumvalue_customname) = "NotRun"];
    // The executor was successful and proposed action updated state
    PROPOSAL_EXECUTOR_RESULT_SUCCESS = 2 [(gogoproto.enumvalue_customname) = "Success"];
    // The executor returned an error and proposed action didn't update state
    PROPOSAL_EXECUTOR_RESULT_FAILURE = 3 [(gogoproto.enumvalue_customname) = "Failure"];
  }
  // Result is the final result based on the votes and election rule. Initial value is NotRun.
  ExecutorResult executor_result = 14;
  // Tally task ID holds the ID of the asynchronous task that is scheduled to
  // create the tally once the voting period is over.
  bytes tally_task_id = 15 [(gogoproto.customname) = "TallyTaskID"];
}

// Resolution contains TextResolution and an electorate reference.
message Resolution {
  weave.Metadata metadata = 1;
  bytes proposal_id = 2 [(gogoproto.customname) = "ProposalID"];
  orm.VersionedIDRef electorate_ref = 3 [(gogoproto.nullable) = false];
  string resolution = 4;
}

// TallyResult contains sums of the votes and all data for the final result.
message TallyResult {
  // TotalYes is the sum of weights of all the voters that approved the proposal
  uint64 total_yes = 1;
  // TotalNo is the sum of weights of all the voters that rejected the proposal
  uint64 total_no = 2;
  // TotalAbstain is the sum of weights of all the voters that voted abstain
  uint64 total_abstain = 3;
  // TotalElectorateWeight is the sum of all weights in the electorate.
  uint64 total_electorate_weight = 4;
  // Quorum when set is the fraction of the total electorate weight that must be exceeded by total votes weight.
  Fraction quorum = 5;
  // Threshold is the fraction of Yes votes of a base value that needs to be exceeded to accept the proposal.
  // The base value is either the total electorate weight or the sum of Yes/No weights when a quorum is defined.
  Fraction threshold = 6 [(gogoproto.nullable) = false];
}

// Vote combines the elector and their voted option to archive them.
// The proposalID and address is stored within the key.
message Vote {
  weave.Metadata metadata = 1;
  // Elector is who voted
  Elector elector = 2 [(gogoproto.nullable) = false];
  // VoteOption is what they voted
  VoteOption voted = 3;
}

// CreateProposalMsg creates a new governance proposal.
// Most fields control the whole election process.
// raw_option contains an transaction to be executed by the governance vote in case of success
// (what is being voted on)
message CreateProposalMsg {
  weave.Metadata metadata = 1;
  // Human readable title. Must match `^[a-zA-Z0-9 _.-]{4,128}$`
  string title = 2;
  // Content of the proposal. Protobuf encoded, app-specific decoded must be passed in handler constructor
  bytes raw_option = 3;
  // Human readable description with 3 to 5000 chars.
  string description = 4;
  // ElectionRuleID is a reference to the election rule
  bytes election_rule_id = 5 [(gogoproto.customname) = "ElectionRuleID"];
  // Unix timestamp when the proposal starts. Must be in the future.
  int64 start_time = 6 [(gogoproto.casttype) = "github.com/iov-one/weave.UnixTime"];
  // Author is an optional field to set the address of the author with a proposal. The author must sign the message.
  // When not set it will default to the main signer.
  bytes author = 7 [(gogoproto.casttype) = "github.com/iov-one/weave.Address"];
}

// DeleteProposalMsg deletes a governance proposal.
message DeleteProposalMsg {
  weave.Metadata metadata = 1;
  // ProposalID is the unique identifier of the proposal to delete
  bytes proposal_id = 2 [(gogoproto.customname) = "ProposalID"];
}

// VoteOptions define possible values for a vote including the INVALID default.
enum VoteOption {
  VOTE_OPTION_INVALID = 0 [(gogoproto.enumvalue_customname) = "Invalid"];
  VOTE_OPTION_YES = 1 [(gogoproto.enumvalue_customname) = "Yes"];
  VOTE_OPTION_NO = 2 [(gogoproto.enumvalue_customname) = "No"];
  VOTE_OPTION_ABSTAIN = 3 [(gogoproto.enumvalue_customname) = "Abstain"];
}

// VoteMsg is the way to express a voice and participate in an election of a proposal on chain.
message VoteMsg {
  weave.Metadata metadata = 1;
  // The unique id of the proposal.
  bytes proposal_id = 2 [(gogoproto.customname) = "ProposalID"];
  // voter address is an optional field. When not set the main signer will be used as default. The voter address
  // must be included in the electorate for a valid vote.
  bytes voter = 3 [(gogoproto.casttype) = "github.com/iov-one/weave.Address"];
  // Option for the vote. Must be Yes, No or Abstain for a valid vote.
  VoteOption selected = 4;
}

// TallyMsg can be sent after the voting period has ended to do the final tally and trigger any state changes.
// A final tally can be execute only once. A second submission will fail with an invalid state error.
message TallyMsg {
  weave.Metadata metadata = 1;
  // ProposalID is UUID of the proposal to close.
  bytes proposal_id = 2 [(gogoproto.customname) = "ProposalID"];
}

// TextResolutionMsg is only intended to be dispatched internally from election
// results. It adds a resolution to the list of "approved" resolutions,
// with a reference to the electorate that approved it
message CreateTextResolutionMsg {
  weave.Metadata metadata = 1;
  string resolution = 2;
}

message UpdateElectorateMsg {
  weave.Metadata metadata = 1;
  // ElectorateID is the reference to the electorate that defines the group of possible voters.
  bytes electorate_id = 2 [(gogoproto.customname) = "ElectorateID"];
  // DiffElectors contains the changes that should be applied. Adding an address should have a positive weight, removing
  // with weight=0.
  repeated Elector diff_electors = 3 [(gogoproto.nullable) = false];
}

message UpdateElectionRuleMsg {
  weave.Metadata metadata = 1;
  // ElectionRuleID is a reference to the election rule
  bytes election_rule_id = 2 [(gogoproto.customname) = "ElectionRuleID"];
  // Duration in seconds of how long the voting period will take place.
  uint32 voting_period = 3 [(gogoproto.casttype) = "github.com/iov-one/weave.UnixDuration"];
  // Threshold is the fraction of all eligible voters, not only the ones who voted. To accept a
  // proposal this value must be exceeded.
  // The formula is `(yes*denominator) > (numerator*total_electors_weight)`.
  // The valid range for the threshold value is `0.5` to `1` (inclusive) which allows any value between half and all
  // of the eligible voters.
  Fraction threshold = 4 [(gogoproto.nullable) = false];
  // The quorum fraction of eligible voters is based on the total electorate
  // weight and defines a threshold of votes that must be exceeded before the
  // acceptance threshold is applied. This value requires any kind of votes
  // and not only YES.
  //
  // The valid range for the threshold value is `0.5` to `1` (inclusive) which
  // allows any value between half and all of the eligible voters.
  Fraction quorum = 5;
}
