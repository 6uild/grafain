syntax = "proto3";

package aswap;

import "codec.proto";
import "coin/codec.proto";
import "gogoproto/gogo.proto";

// Swap is designed to hold some coins for atomic swap, locked by preimage_hash
message Swap {
  // metadata is used for schema versioning support
  weave.Metadata metadata = 1;
  // sha256 hash of preimage, 32 bytes long
  bytes preimage_hash = 2;
  // source is a sender address
  bytes source = 3 [(gogoproto.casttype) = "github.com/iov-one/weave.Address"];
  // destination is an address of destination
  bytes destination = 5 [(gogoproto.casttype) = "github.com/iov-one/weave.Address"];
  // If unreleased before timeout, swap will return coins to source.
  // Timeout represents wall clock time as read from the block header. Timeout
  // is represented using POSIX time format.
  // Expiration time is inclusive meaning that the swap expires as soon as
  // the current time is equal or greater than timeout value.
  // nonexpired: [created, timeout)
  // expired: [timeout, infinity)
  int64 timeout = 6 [(gogoproto.casttype) = "github.com/iov-one/weave.UnixTime"];
  // max length 128 characters
  string memo = 7;
  // Address of this entity. Set during creation and does not change.
  bytes address = 8 [(gogoproto.casttype) = "github.com/iov-one/weave.Address"];
}

// CreateMsg creates a Swap with some coins.
message CreateMsg {
  weave.Metadata metadata = 1;
  bytes source = 2 [(gogoproto.casttype) = "github.com/iov-one/weave.Address"];
  // sha256 hash of preimage, 32 bytes long
  bytes preimage_hash = 3;
  bytes destination = 4 [(gogoproto.casttype) = "github.com/iov-one/weave.Address"];
  // amount may contain multiple token types
  repeated coin.Coin amount = 5;
  // Timeout represents wall clock time.
  int64 timeout = 6 [(gogoproto.casttype) = "github.com/iov-one/weave.UnixTime"];
  // max length 128 character
  string memo = 7;
}

// ReleaseMsg releases the tokens to the destination.
// This operation is authorized by preimage, which is sent raw and then hashed on the backend.
message ReleaseMsg {
  weave.Metadata metadata = 1;
  // swap_id to release
  bytes swap_id = 2 [(gogoproto.customname) = "SwapID"];
  // raw preimage to unlock swap, also helpful to retrieve the swap by it's hashed version
  // must be exactly 32 bytes long
  bytes preimage = 3;
}

// ReturnMsg releases the tokens to the source.
// This operation only works if the Swap is expired.
message ReturnMsg {
  weave.Metadata metadata = 1;
  // swap_id to return
  bytes swap_id = 2 [(gogoproto.customname) = "SwapID"];
}
