syntax = "proto3";

package bnsd;

import "cmd/bnsd/x/username/codec.proto";
import "gogoproto/gogo.proto";
import "migration/codec.proto";
import "x/aswap/codec.proto";
import "x/cash/codec.proto";
import "x/currency/codec.proto";
import "x/distribution/codec.proto";
import "x/escrow/codec.proto";
import "x/gov/codec.proto";
import "x/multisig/codec.proto";
import "x/sigs/codec.proto";
import "x/validators/codec.proto";

// Tx contains the message.
//
// When extending Tx, follow the rules:
// - range 1-50 is reserved for middlewares,
// - range 51-inf is reserved for different message types,
// - keep the same numbers for the same message types in both bnsd and other
//   applications. For example, FeeInfo field is used by both and indexed at
//   first position. Skip unused fields (leave index unused or comment out for
//   clarity).
// When there is a gap in message sequence numbers - that most likely means some
// old fields got deprecated. This is done to maintain binary compatibility.
message Tx {
  cash.FeeInfo fees = 1;
  repeated sigs.StdSignature signatures = 2;
  // ID of a multisig contract.
  repeated bytes multisig = 4;
  // msg is a sum type over all allowed messages on this chain.
  oneof sum {
    cash.SendMsg cash_send_msg = 51;
    escrow.CreateMsg escrow_create_msg = 52;
    escrow.ReleaseMsg escrow_release_msg = 53;
    escrow.ReturnMsg escrow_return_msg = 54;
    escrow.UpdatePartiesMsg escrow_update_parties_msg = 55;
    multisig.CreateMsg multisig_create_msg = 56;
    multisig.UpdateMsg multisig_update_msg = 57;
    validators.ApplyDiffMsg validators_apply_diff_msg = 58;
    currency.CreateMsg currency_create_msg = 59;
    ExecuteBatchMsg execute_batch_msg = 60;
    username.RegisterTokenMsg username_register_token_msg = 61;
    username.TransferTokenMsg username_transfer_token_msg = 62;
    username.ChangeTokenTargetsMsg username_change_token_targets_msg = 63;
    distribution.CreateMsg distribution_create_msg = 66;
    distribution.DistributeMsg distribution_msg = 67;
    distribution.ResetMsg distribution_reset_msg = 68;
    migration.UpgradeSchemaMsg migration_upgrade_schema_msg = 69;
    aswap.CreateMsg aswap_create_msg = 70;
    aswap.ReleaseMsg aswap_release_msg = 71;
    aswap.ReturnMsg aswap_return_msg = 72;
    gov.CreateProposalMsg gov_create_proposal_msg = 73;
    gov.DeleteProposalMsg gov_delete_proposal_msg = 74;
    gov.VoteMsg gov_vote_msg = 75;
    // Tally is executed via cron only.
    // gov.TallyMsg gov_tally_msg = 76;
    gov.UpdateElectorateMsg gov_update_electorate_msg = 77;
    gov.UpdateElectionRuleMsg gov_update_election_rule_msg = 78;
    // 79 is reserved (see ProposalOptions: TextResolutionMsg)

  }
}

// ExecuteBatchMsg encapsulates multiple messages to support batch transaction
message ExecuteBatchMsg {
  message Union {
    oneof sum {
      cash.SendMsg cash_send_msg = 51;
      escrow.CreateMsg escrow_create_msg = 52;
      escrow.ReleaseMsg escrow_release_msg = 53;
      escrow.ReturnMsg escrow_return_msg = 54;
      escrow.UpdatePartiesMsg escrow_update_parties_msg = 55;
      multisig.CreateMsg multisig_create_msg = 56;
      multisig.UpdateMsg multisig_update_msg = 57;
      validators.ApplyDiffMsg validators_apply_diff_msg = 58;
      currency.CreateMsg currency_create_msg = 59;
      // No recursive batches!
      username.RegisterTokenMsg username_register_token_msg = 61;
      username.TransferTokenMsg username_transfer_token_msg = 62;
      username.ChangeTokenTargetsMsg username_change_token_targets_msg = 63;
      distribution.CreateMsg distribution_create_msg = 66;
      distribution.DistributeMsg distribution_msg = 67;
      distribution.ResetMsg distribution_reset_msg = 68;
      // upgrade schema is important enough, it should be a solo action
      // aswap and gov don't make much sense as part of a batch (no vote buying)

    }
  }
  repeated Union messages = 1 [(gogoproto.nullable) = false];
}

// ProposalOptions are possible items that can be enacted by a governance vote
// Trimmed down somewhat arbitrary to what is believed to be reasonable
message ProposalOptions {
  oneof option {
    cash.SendMsg cash_send_msg = 51;
    escrow.ReleaseMsg escrow_release_msg = 53;
    escrow.UpdatePartiesMsg update_escrow_parties_msg = 55;
    multisig.UpdateMsg multisig_update_msg = 57;
    validators.ApplyDiffMsg validators_apply_diff_msg = 58;
    currency.CreateMsg currency_create_msg = 59;
    ExecuteProposalBatchMsg execute_proposal_batch_msg = 60;
    username.RegisterTokenMsg username_register_token_msg = 61;
    username.TransferTokenMsg username_transfer_token_msg = 62;
    username.ChangeTokenTargetsMsg username_change_token_targets_msg = 63;
    distribution.CreateMsg distribution_create_msg = 66;
    distribution.DistributeMsg distribution_msg = 67;
    distribution.ResetMsg distribution_reset_msg = 68;
    migration.UpgradeSchemaMsg migration_upgrade_schema_msg = 69;
    gov.UpdateElectorateMsg gov_update_electorate_msg = 77;
    gov.UpdateElectionRuleMsg gov_update_election_rule_msg = 78;
    gov.CreateTextResolutionMsg gov_create_text_resolution_msg = 79;
  }
}

message ExecuteProposalBatchMsg {
  message Union {
    oneof sum {
      cash.SendMsg send_msg = 51;
      escrow.ReleaseMsg escrow_release_msg = 53;
      escrow.UpdatePartiesMsg update_escrow_parties_msg = 55;
      multisig.UpdateMsg multisig_update_msg = 57;
      validators.ApplyDiffMsg validators_apply_diff_msg = 58;
      // no recursive batches
      username.RegisterTokenMsg username_register_token_msg = 61;
      username.TransferTokenMsg username_transfer_token_msg = 62;
      username.ChangeTokenTargetsMsg username_change_token_targets_msg = 63;
      distribution.CreateMsg distribution_create_msg = 66;
      distribution.DistributeMsg distribution_msg = 67;
      distribution.ResetMsg distribution_reset_msg = 68;
      // don't allow UpgradeSchema as part of a batch, as effects are too confusing
      gov.UpdateElectorateMsg gov_update_electorate_msg = 77;
      gov.UpdateElectionRuleMsg gov_update_election_rule_msg = 78;
      gov.CreateTextResolutionMsg gov_create_text_resolution_msg = 79;
    }
  }
  repeated Union messages = 1 [(gogoproto.nullable) = false];
}

// CronTask is a format used by the CronMarshaler to marshal and unmarshal cron
// task.
//
// When there is a gap in message sequence numbers - that most likely means some
// old fields got deprecated. This is done to maintain binary compatibility.
message CronTask {
  // Authenticators contains a list of conditions that authenticate execution
  // of this task.
  // This is one of the main differences between the CronTask and Tx entities.
  // CronTask is created interanlly and does not have to be signed. Because we
  // use the same handlers as for the Tx to process a cron task, we must
  // provide authentication method. This attribute contains all authentication
  // conditions required for execution, that will be inserted into the context.
  repeated bytes authenticators = 1 [(gogoproto.casttype) = "github.com/iov-one/weave.Condition"];
  // Use the same indexes for the messages as the Tx message.
  oneof sum {
    escrow.ReleaseMsg escrow_release_msg = 53;
    escrow.ReturnMsg escrow_return_msg = 54;
    distribution.DistributeMsg distribution_distribute_msg = 67;
    aswap.ReleaseMsg aswap_release_msg = 71;
    gov.TallyMsg gov_tally_msg = 76;
  }
}
